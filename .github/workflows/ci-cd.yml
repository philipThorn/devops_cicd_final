name: Docker Image CI

on:
  push:
    branches:
    - 'Dev'
    - 'main'
    - 'feature/**'
  pull_request:
    branches:
    - 'Dev'
    - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_DATABASE: example
      MYSQL_USER: username
      MYSQL_PASSWORD: password
      IMAGE_NAME: my_flask
      REGISTRY: ghcr.io
      REPO_NAME: ${{ github.event.repository.name }}

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_RANDOM_ROOT_PASSWORD: yes
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping" --health-interval 15s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Setup & test DB
        run: |
          for sql_script in `ls ./sql/*.sql`;
          do
            echo "loading: $sql_script"
            mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -D$MYSQL_DATABASE < $sql_script;
          done
          mysql --version
          mysql -h$MYSQL_HOST -D$MYSQL_DATABASE -u$MYSQL_USER -p$MYSQL_PASSWORD -e 'select * from products;'

      - name: Analysing the code with pylint
        run: |
          pylint --errors-only $(git ls-files '*.py')

      - name: Unit test with Pytest
        run: |
          pytest --cov=shop_app tests/unit/
          python3 -m pytest tests/unit/

      - name: lowercase REPO
        id: step_one
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Build the Docker image
        id: step_two
        run: |
          echo ${{ env.REPO_NAME }}
          docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}

      - name: Run flask
        run: docker run --network host -d -e MYSQL_HOST=${{ env.MYSQL_HOST }} -e MYSQL_PASSWORD=$MYSQL_PASSWORD -p 5000:5000 ${{ env.REGISTRY }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}

      - name: Integration test with Pytest
        run: |
          pytest --cov=shop_app tests/integration
          pytest tests/integration

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"
      - name: Confirm git commit SHA output
        run: echo ${{ steps.vars.outputs.short_sha }}

      - name: get branch name
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Get branch tag
        uses: haya14busa/action-cond@v1
        id: condval
        with:
          cond: ${{ env.BRANCH == 'main' }}
          if_true: "latest"
          if_false: "${{ env.BRANCH }}:${{ steps.vars.outputs.short_sha }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.MY_SECRET_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}/${{ steps.condval.outputs.value }}
