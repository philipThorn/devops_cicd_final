name: Docker Image CI

on:
  push:


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_DATABASE: example
      MYSQL_USER: username
      MYSQL_PASSWORD: password
      IMAGE_NAME: my_flask
      REGISTRY: ghcr.io
      REPO_NAME: ${{ github.event.repository.name }}

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_RANDOM_ROOT_PASSWORD: yes
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping" --health-interval 15s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Setup & test DB
        run: |
          for sql_script in `ls ./sql/*.sql`;
          do
            echo "loading: $sql_script"
            mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -D$MYSQL_DATABASE < $sql_script;
          done
          mysql --version
          mysql -h$MYSQL_HOST -D$MYSQL_DATABASE -u$MYSQL_USER -p$MYSQL_PASSWORD -e 'select * from products;'
      - name: lowercase REPO
        id: step_one
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Build the Docker image
        id: step_two
        run: |
          echo ${{ env.REPO_NAME }}
          docker build . --file Dockerfile --tag ${{ env.REPO }}/${{ env.IMAGE_NAME }}

      - name: Run flask server
        run: docker run --network host -d -e MYSQL_HOST=${{ env.MYSQL_HOST }} -e MYSQL_PASSWORD=$MYSQL_PASSWORD -p 5000:5000 ${{ env.REPO }}/${{ env.IMAGE_NAME }}

      - name: Pytest
        run: |
          pip install -r requirements.txt
          pytest tests/integration

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.MY_SECRET_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REPO }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
